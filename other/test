
// long long unsigned get_divisors(int n)
// {
//     long long unsigned ret = 0;

//     for(int i = 1; i <= n / i; ++i)
//         if(n % i == 0)
//         {
//             ret += i;
//             if(!composite[i])
//                 ret += i;
//             if(n != i * i)
//                 ret += (n / i);
//         }
    
//     return ret;
// }
 
// void solve()
// {
//     int n;
//     scanf("%d", &n);
//     long long unsigned val = get_divisors(n);

//     printf("%s\n", composite[val]? "NO" : "YES");
// }

// char distinct[50];

// string password()

// void solve()
// {
//     int n;
//     scanf("%d%s", &n, distinct);
//     sort(distinct, distinct + strlen(distinct));
// }
